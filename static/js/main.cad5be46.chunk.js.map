{"version":3,"sources":["components/ScoreForm.tsx","utils/useForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ScoreForm","useState","revealScores","setRevealScores","authCode","setAuthCode","initial","name","value","criticScore","inputs","setInputs","handleChange","e","currentTarget","map","input","useForm","ColHeader","title","span","style","textAlign","direction","justify","align","gutter","level","id","maxLength","placeholder","size","onChange","Math","abs","Number","target","disabled","onClick","type","reduce","acc","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cad5be46.chunk.js","sourcesContent":["import { Button, Col, Input, Row, Space } from 'antd';\nimport Title from 'antd/lib/typography/Title';\n\nimport React, { useState } from 'react';\nimport useForm from '../utils/useForm';\n\nexport const ScoreForm = () => {\n  const [revealScores, setRevealScores] = useState(false);\n  const [authCode, setAuthCode] = useState('');\n  const { inputs, handleChange } = useForm([\n    { name: 'Titantic', value: '', criticScore: '75' },\n    { name: 'Castaway', value: '', criticScore: '21' },\n    { name: 'Toy Story', value: '', criticScore: '0' },\n    { name: 'test multiword', value: '', criticScore: '100' },\n  ]);\n\n  const ColHeader = ({ title, span = 6 }: { title: string; span?: number }) => (\n    <Col style={{ textAlign: 'center' }} span={span}>\n      <Title>{title}</Title>\n    </Col>\n  );\n\n  return (\n    <form>\n      <Space direction=\"vertical\">\n        <Row justify=\"space-between\" align=\"middle\">\n          <ColHeader title=\"Movie\" span={8} />\n          <ColHeader title=\"Guess\" span={4} />\n          <ColHeader title=\"Critic's Score\" />\n          <ColHeader title=\"Your Score\" />\n        </Row>\n        <Row justify=\"space-between\" gutter={[16, 32]} align=\"middle\">\n          {inputs.map(({ name, value, criticScore }) => (\n            <>\n              <Col span={8}>\n                <Title level={3}>{name}</Title>\n              </Col>\n              <Col span={4}>\n                <Input\n                  id={name}\n                  name={name}\n                  maxLength={2}\n                  placeholder=\"0\"\n                  size=\"large\"\n                  value={value}\n                  onChange={handleChange}\n                />\n              </Col>\n              <Col style={{ textAlign: 'center' }} span={6}>\n                {revealScores ? (\n                  <Title level={3}>{criticScore}</Title>\n                ) : (\n                  <Title></Title>\n                )}\n              </Col>\n              <Col style={{ textAlign: 'center' }} span={6}>\n                {revealScores && (\n                  <Title level={3}>\n                    {Math.abs(Number(value) - Number(criticScore))}\n                  </Title>\n                )}\n              </Col>\n            </>\n          ))}\n          <Col span={8}>\n            <Title level={2}>Total Score</Title>\n          </Col>\n          <Col span={4}>\n            <Input\n              id=\"authCode\"\n              name=\"authCode\"\n              placeholder=\"passcode\"\n              size=\"large\"\n              value={authCode}\n              onChange={(e) => setAuthCode(e.target.value)}\n            />\n          </Col>\n          <Col style={{ textAlign: 'center' }} span={6}>\n            <Button\n              disabled={!(authCode === '1234')}\n              onClick={() => setRevealScores(!revealScores)}\n            >\n              Reveal Scores?\n            </Button>\n          </Col>\n          <Col style={{ textAlign: 'center' }} span={6}>\n            {revealScores && (\n              <Title level={2} type=\"success\">\n                {inputs.reduce(\n                  (acc, { value, criticScore }) =>\n                    acc + Math.abs(Number(value) - Number(criticScore)),\n                  0\n                )}\n              </Title>\n            )}\n          </Col>\n        </Row>\n      </Space>\n    </form>\n  );\n};\n","import { FormEvent, useState } from 'react';\n\ntype InputObject = {\n  name: string;\n  value: string;\n  criticScore: string;\n};\n\nexport default function useForm(\n  initial: InputObject[] = [{ name: '', value: '', criticScore: '' }]\n) {\n  // create a state object for our inputs\n  const [inputs, setInputs] = useState(initial);\n\n  function handleChange(e: FormEvent<HTMLInputElement>) {\n    let { name, value } = e.currentTarget;\n\n    setInputs(\n      inputs.map((input) => (input.name === name ? { ...input, value } : input))\n    );\n  }\n\n  return {\n    inputs,\n    handleChange,\n  };\n}\n","import React from 'react';\nimport { ScoreForm } from './components/ScoreForm';\nimport 'antd/dist/antd.css';\nimport { Col, Layout, Row } from 'antd';\nimport { Content, Header } from 'antd/lib/layout/layout';\n\nfunction App() {\n  return (\n    <Layout>\n      <Header>Friyay Quiz</Header>\n      <Content>\n        <Row>\n          <Col span={6} />\n          <Col span={12}>\n            <ScoreForm />\n          </Col>\n          <Col span={6} />\n        </Row>\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}