{"version":3,"sources":["utils/utils.ts","components/PlayerScore.tsx","components/ScoreForm.tsx","utils/useForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculatePlayerScore","guess","criticScore","playerScore","Math","abs","Number","PlayerScore","type","score","amount","getInputType","level","initialValues","value","ScoreForm","useState","revealScores","setRevealScores","authCode","setAuthCode","initial","name","inputs","setInputs","handleChange","e","currentTarget","map","input","toString","useForm","ColHeader","title","span","style","textAlign","direction","justify","align","gutter","i","id","maxLength","placeholder","size","onChange","target","disabled","onClick","reduce","acc","App","xs","sm","lg","xl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2430f8b.chunk.js","sourcesContent":["export const getInputType = (score: string) => {\n  const amount = Number(score);\n  return amount < 6 ? 'success' : amount < 35 ? 'warning' : 'danger';\n};\n\nexport const calculatePlayerScore = (guess: string, criticScore: string) => {\n  const playerScore = Math.abs(Number(guess) - Number(criticScore));\n  return playerScore === 0 ? -5 : playerScore;\n};\n","import Title from 'antd/lib/typography/Title';\nimport { getInputType } from '../utils/utils';\n\ntype PlayerScoreProps = {\n  playerScore: string;\n};\n\nexport const PlayerScore = ({ playerScore }: PlayerScoreProps) => {\n  const type = getInputType(playerScore);\n\n  return (\n    <Title type={type} level={3}>\n      {playerScore}\n    </Title>\n  );\n};\n","import { Button, Col, Input, Row, Space } from 'antd';\nimport Title from 'antd/lib/typography/Title';\n\nimport React, { useState } from 'react';\nimport useForm from '../utils/useForm';\nimport { PlayerScore } from './PlayerScore';\n\nconst initialValues = {\n  value: '',\n  playerScore: '100',\n};\n\nexport const ScoreForm = () => {\n  const [revealScores, setRevealScores] = useState(false);\n  const [authCode, setAuthCode] = useState('');\n  const { inputs, handleChange } = useForm([\n    { name: '1. Batman and Robin', criticScore: '12', ...initialValues },\n    { name: '2. Bad Santa', criticScore: '78', ...initialValues },\n    { name: '3. Fight Club', criticScore: '79', ...initialValues },\n    { name: '4. Manchester by the Sea', criticScore: '96', ...initialValues },\n    { name: '5. Armageddon', criticScore: '38', ...initialValues },\n    { name: '6. Iron Man 3', criticScore: '79', ...initialValues },\n    { name: '7. Downsizing', criticScore: '47', ...initialValues },\n    { name: '8. Entrapment', criticScore: '39', ...initialValues },\n    { name: '9. The Godfather Part II', criticScore: '96', ...initialValues },\n    { name: '10. Pretty Woman', criticScore: '64', ...initialValues },\n  ]);\n\n  const ColHeader = ({ title, span = 6 }: { title: string; span?: number }) => (\n    <Col style={{ textAlign: 'center' }} span={span}>\n      <Title>{title}</Title>\n    </Col>\n  );\n\n  return (\n    <form>\n      <Space direction=\"vertical\">\n        <Row justify=\"space-between\" align=\"middle\">\n          <ColHeader title=\"Movie\" span={8} />\n          <ColHeader title=\"Guess\" span={4} />\n          <ColHeader title=\"Critic's Score\" />\n          <ColHeader title=\"Your Score\" />\n        </Row>\n        <Row justify=\"space-between\" gutter={[16, 32]} align=\"middle\">\n          {inputs.map(({ name, value, criticScore, playerScore }, i) => (\n            <>\n              <Col span={8}>\n                <Title level={3}>{name}</Title>\n              </Col>\n              <Col span={4}>\n                <Input\n                  id={name}\n                  name={name}\n                  maxLength={3}\n                  placeholder=\"\"\n                  size=\"large\"\n                  value={value}\n                  onChange={handleChange}\n                />\n              </Col>\n              <Col style={{ textAlign: 'center' }} span={6}>\n                {revealScores ? (\n                  <Title level={3}>{criticScore}</Title>\n                ) : (\n                  <Title />\n                )}\n              </Col>\n              <Col style={{ textAlign: 'center' }} span={6}>\n                {revealScores && <PlayerScore playerScore={playerScore} />}\n              </Col>\n            </>\n          ))}\n          <Col span={8}>\n            <Title level={2}>Total Score</Title>\n          </Col>\n          <Col span={4}>\n            <Input\n              id=\"authCode\"\n              name=\"authCode\"\n              placeholder=\"passcode\"\n              size=\"large\"\n              value={authCode}\n              onChange={(e) => setAuthCode(e.target.value)}\n            />\n          </Col>\n          <Col style={{ textAlign: 'center' }} span={6}>\n            <Button\n              disabled={!(authCode === 'friyay')}\n              onClick={() => setRevealScores(!revealScores)}\n            >\n              Reveal Scores?\n            </Button>\n          </Col>\n          <Col style={{ textAlign: 'center' }} span={6}>\n            {revealScores && (\n              <Title level={2}>\n                {inputs.reduce(\n                  (acc, { playerScore }) => acc + Number(playerScore),\n                  0\n                )}\n              </Title>\n            )}\n          </Col>\n        </Row>\n      </Space>\n    </form>\n  );\n};\n","import { FormEvent, useState } from 'react';\nimport { calculatePlayerScore } from './utils';\n\ntype InputObject = {\n  name: string;\n  value: string;\n  criticScore: string;\n  playerScore: string;\n};\n\ntype Form = InputObject[];\n\nexport default function useForm(\n  initial: Form = [{ name: '', value: '', criticScore: '', playerScore: '' }]\n) {\n  // create a state object for our inputs\n  const [inputs, setInputs] = useState(initial);\n\n  function handleChange(e: FormEvent<HTMLInputElement>) {\n    let { name, value } = e.currentTarget;\n\n    setInputs(\n      inputs.map((input: InputObject) =>\n        input.name === name\n          ? {\n              ...input,\n              value,\n              playerScore: calculatePlayerScore(\n                value,\n                input.criticScore\n              ).toString(),\n            }\n          : input\n      )\n    );\n  }\n\n  return {\n    inputs,\n    handleChange,\n  };\n}\n","import React from 'react';\nimport { ScoreForm } from './components/ScoreForm';\nimport 'antd/dist/antd.css';\nimport { Col, Layout, Row } from 'antd';\nimport { Content, Header } from 'antd/lib/layout/layout';\n\nfunction App() {\n  return (\n    <Layout>\n      <Header>Friyay Quiz</Header>\n      <Content>\n        <Row>\n          <Col xs={0} sm={1} lg={2} xl={6} />\n          <Col xs={24} sm={22} lg={18} xl={12}>\n            <ScoreForm />\n          </Col>\n          <Col xs={0} sm={1} lg={2} xl={6} />\n        </Row>\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}